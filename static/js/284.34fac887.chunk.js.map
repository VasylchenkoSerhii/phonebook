{"version":3,"file":"static/js/284.34fac887.chunk.js","mappings":"8PAGaA,EAAsBC,EAAAA,GAAAA,QAAH,sJAgFnBC,IAvEYD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,iMAIP,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,UAAUC,CAAtB,IACL,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,IAAnB,IAGK,SAAAL,GAAC,OAAIA,EAAEC,MAAMC,UAAUI,CAAtB,IAIGT,EAAAA,GAAAA,MAAH,uaAyBOA,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,oSAKX,SAAAG,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,IAAnB,KAaSR,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAH,uPAGH,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,UAAUO,EAAtB,IACL,SAAAT,GAAC,OAAIA,EAAEC,MAAMG,OAAOM,KAAnB,IAOK,SAAAV,GAAC,OAAIA,EAAEC,MAAMC,UAAUS,CAAtB,IAKKd,EAAAA,GAAAA,OAAH,+YACE,SAAAG,GAAC,OAAIA,EAAEC,MAAMG,OAAOQ,MAAnB,IAEZ,SAAAZ,GAAC,OAAIA,EAAEC,MAAMG,OAAOS,KAAnB,IAMG,SAAAb,GAAC,OAAIA,EAAEC,MAAMC,UAAUS,CAAtB,IASC,SAAAX,GAAC,OAAIA,EAAEC,MAAMC,UAAUC,CAAtB,K,mBC7FZW,EAAQC,EAAAA,KAAaC,MAAM,CAC/BC,MAAOF,EAAAA,KAEJG,QACC,uJACA,iBAEDC,SAAS,qBACZC,SAAUL,EAAAA,KAEPM,IAAI,EAAG,sCACPH,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBC,SAAS,0BAGC,SAASG,IACtB,IAKMC,GAAWC,EAAAA,EAAAA,MAOXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAboB,CACpBV,MAAO,GACPG,SAAU,IAYVQ,iBAAkBd,EAClBe,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBR,GAASS,EAAAA,EAAAA,IAAMF,IACfC,GACD,IAGH,OACE,SAACnC,EAAD,WACE,kBAAMiC,SAAUJ,EAAOQ,aAAvB,WACE,SAACC,EAAA,EAAD,CACEf,UAAQ,EACRgB,MAAOV,EAAOK,OAAOb,MACrBmB,SAAUX,EAAOY,aACjBC,GAAG,QACHC,MAAM,QACNC,KAAK,QACLC,KAAK,QACLC,OAAO,SACPC,QAAQ,WACRC,KAAK,QACLlC,MAAOe,EAAOoB,QAAQ5B,OAAS6B,QAAQrB,EAAOsB,OAAO9B,OACrD+B,WAAYvB,EAAOoB,QAAQ5B,OAASQ,EAAOsB,OAAO9B,SAEpD,SAACiB,EAAA,EAAD,CACEf,UAAQ,EACRgB,MAAOV,EAAOK,OAAOV,SACrBgB,SAAUX,EAAOY,aACjBC,GAAG,WACHC,MAAM,WACNC,KAAK,WACLC,KAAK,WACLC,OAAO,SACPC,QAAQ,WACRC,KAAK,QACLlC,MAAOe,EAAOoB,QAAQzB,UAAY0B,QAAQrB,EAAOsB,OAAO3B,UACxD4B,WAAYvB,EAAOoB,QAAQzB,UAAYK,EAAOsB,OAAO3B,YAYvD,SAACtB,EAAD,CAAS2C,KAAK,SAAd,wBAIP,CC1Fc,SAASQ,IACtB,OACE,+BACE,SAAC3B,EAAD,KAGL,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const SectionRegisterForm = styled.section`\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n\nexport const FormStyle = styled(Form)`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  align-items: flex-end;\n  width: 215px;\n  justify-content: space-between;\n  text-align: start;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 270px;\n\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nexport const InputForm = styled(Field)`\n  display: inline-block;\n  width: 150px;\n  height: 20px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 200px;\n    height: 25px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 200px;\n    height: 35px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 20px;\n  font-size: ${p => p.theme.fontSizes.xs};\n  color: ${p => p.theme.colors.error};\n\n  @media screen and (min-width: 768px) {\n    top: 28px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    top: 37px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.s};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport TextField from '@mui/material/TextField';\nimport * as yup from 'yup';\nimport { SectionRegisterForm } from './LoginForm.styled';\nimport { FormBtn } from './LoginForm.styled';\nimport { logIn } from 'redux/auth/operations';\n\nconst shema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      'Invalid email'\n    )\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .required('Password is required'),\n});\n\nexport default function LoginForm() {\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const dispatch = useDispatch();\n\n  // const handleSubmit = (values, { resetForm }) => {\n  //   dispatch(logIn(values));\n  //   resetForm();\n  // };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: shema,\n    onSubmit: (values, { resetForm }) => {\n      dispatch(logIn(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <SectionRegisterForm>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          required\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          id=\"email\"\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          size=\"small\"\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          required\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          id=\"password\"\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          size=\"small\"\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        {/* <Label>\n            Email\n            <InputForm type=\"email\" name=\"email\" />\n            <Error component=\"div\" name=\"email\" />\n          </Label>\n          <Label>\n            Password\n            <InputForm type=\"password\" name=\"password\" />\n            <Error component=\"div\" name=\"password\" />\n          </Label> */}\n        <FormBtn type=\"submit\">Log in</FormBtn>\n      </form>\n    </SectionRegisterForm>\n  );\n}\n","import LoginForm from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["SectionRegisterForm","styled","FormBtn","Form","p","theme","fontSizes","m","colors","text","l","Field","ErrorMessage","xs","error","s","accent","white","shema","yup","shape","email","matches","required","password","min","LoginForm","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","logIn","handleSubmit","TextField","value","onChange","handleChange","id","label","name","type","margin","variant","size","touched","Boolean","errors","helperText","Login"],"sourceRoot":""}