{"version":3,"file":"static/js/478.eebd6d80.chunk.js","mappings":"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","sources":["components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/FormContacts/FormContacts.styled.jsx","components/FormContacts/FormContacts.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  max-width: 300px;\n  margin-right: auto;\n  margin-left: auto;\n  display: flex;\n  flex-flow: column;\n\n  @media screen and (min-width: 768px) {\n    max-width: 700px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  text-align: start;\n  font-size: 20px;\n  border-bottom: ${p => p.theme.borders.normal};\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Number = styled.span`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n`;\n\nexport const RemoveContactBtn = styled.button`\n  margin-left: 5px;\n  padding: 3px 3px;\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.xs};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport {\n  ListItem,\n  List,\n  Number,\n  RemoveContactBtn,\n} from './ContactsList.styled';\n\nexport default function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContacts = contacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      const result = normalizedName.includes(normalizedFilter);\n      return result;\n    });\n\n    return filteredContacts;\n  };\n\n  const filterContacts = getFilteredContacts();\n\n  const markup = filterContacts.map(({ id, name, number }) => (\n    <ListItem key={id}>\n      <p>\n        {name}:{' '}\n        <Number>\n          {number}\n          <RemoveContactBtn\n            type=\"button\"\n            onClick={() => dispatch(removeContact(id))}\n          >\n            Delete\n          </RemoveContactBtn>\n        </Number>\n      </p>\n    </ListItem>\n  ));\n  return <List>{markup}</List>;\n}\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const SectionForm = styled.section`\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n\nexport const FormStyle = styled(Form)`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  align-items: flex-end;\n  width: 215px;\n  justify-content: space-between;\n  text-align: start;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 270px;\n\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nexport const InputForm = styled(Field)`\n  display: inline-block;\n  width: 150px;\n  height: 20px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 200px;\n    height: 25px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 200px;\n    height: 35px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 20px;\n  font-size: ${p => p.theme.fontSizes.xs};\n  color: ${p => p.theme.colors.error};\n\n  @media screen and (min-width: 768px) {\n    top: 28px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    top: 37px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.s};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { Formik } from 'formik';\nimport {\n  FormStyle,\n  SectionForm,\n  InputForm,\n  Label,\n  Error,\n  FormBtn,\n} from './FormContacts.styled';\nimport * as yup from 'yup';\n\nconst shema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name'\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid number'\n    )\n    .required('Number is required'),\n});\n\nexport default function FormContacts() {\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n\n  const isDublicate = ({ name, phone }) => {\n    const result = contacts.find(\n      item => item.name === name || item.phone === phone\n    );\n    return result;\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (isDublicate(values)) {\n      toast('this name or number is already added to contacts');\n      resetForm();\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <SectionForm>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={shema}\n      >\n        <FormStyle>\n          <Label>\n            Name\n            <InputForm\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Vasylchenko Serhii\"\n            />\n            <Error component=\"div\" name=\"name\" />\n          </Label>\n          <Label>\n            Number\n            <InputForm type=\"tel\" name=\"number\" placeholder=\"+380\" />\n            <Error component=\"div\" name=\"number\" />\n          </Label>\n          <FormBtn type=\"submit\">Add contact</FormBtn>\n        </FormStyle>\n      </Formik>\n    </SectionForm>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FormContacts from 'components/FormContacts/FormContacts';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <FormContacts />\n      {contacts.length > 0 ? <ContactsList /> : <p>Add your first number</p>}\n    </>\n  );\n}\n"],"names":["List","styled","ListItem","p","theme","borders","normal","Number","RemoveContactBtn","colors","accent","white","fontSizes","xs","m","ContactsList","contacts","useSelector","selectContacts","filter","selectFilter","dispatch","useDispatch","markup","normalizedFilter","toLocaleLowerCase","name","includes","getFilteredContacts","map","id","number","type","onClick","removeContact","SectionForm","FormStyle","Form","text","l","Label","InputForm","Field","Error","ErrorMessage","error","s","FormBtn","shema","yup","shape","matches","required","FormContacts","initialValues","onSubmit","values","resetForm","phone","find","item","isDublicate","toast","addContact","validationSchema","placeholder","component","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}