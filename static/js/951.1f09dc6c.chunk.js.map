{"version":3,"file":"static/js/951.1f09dc6c.chunk.js","mappings":"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","sources":["pages/Contacts/Contaxts.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/FormContacts/FormContacts.styled.jsx","components/FormContacts/FormContacts.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Loader = styled.p`\n  font-weight: ${p => p.theme.fontWeights.bold};\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n","import styled from 'styled-components';\n\nexport const FilterStyle = styled.input`\n  height: 30px;\n  width: 200px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    height: 40px;\n    width: 400px;\n  }\n`;\n\nexport const SectionFilter = styled.section`\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { FilterStyle, SectionFilter } from './Filter.styled';\n\nexport default function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <SectionFilter>\n      <FilterStyle\n        type=\"text\"\n        value={filter}\n        onChange={handleChange}\n        placeholder=\"Finde contact\"\n      />\n    </SectionFilter>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  max-width: 300px;\n  margin-right: auto;\n  margin-left: auto;\n  display: flex;\n  flex-flow: column;\n\n  @media screen and (min-width: 768px) {\n    max-width: 700px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  text-align: start;\n  font-size: 20px;\n  border-bottom: ${p => p.theme.borders.normal};\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Number = styled.span`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n`;\n\nexport const RemoveContactBtn = styled.button`\n  margin-left: 5px;\n  padding: 3px 3px;\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.xs};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport {\n  ListItem,\n  List,\n  Number,\n  RemoveContactBtn,\n} from './ContactsList.styled';\n\nexport default function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContacts = contacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      const result = normalizedName.includes(normalizedFilter);\n      return result;\n    });\n\n    return filteredContacts;\n  };\n\n  const filterContacts = getFilteredContacts();\n\n  const markup = filterContacts.map(({ id, name, number }) => (\n    <ListItem key={id}>\n      <p>\n        {name}:{' '}\n        <Number>\n          {number}\n          <RemoveContactBtn\n            type=\"button\"\n            onClick={() => dispatch(removeContact(id))}\n          >\n            Delete\n          </RemoveContactBtn>\n        </Number>\n      </p>\n    </ListItem>\n  ));\n  return <List>{markup}</List>;\n}\n","import { Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const SectionForm = styled.section`\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  align-items: flex-end;\n  width: 215px;\n  justify-content: space-between;\n  text-align: start;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 270px;\n\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nexport const InputForm = styled(Field)`\n  display: inline-block;\n  width: 150px;\n  height: 20px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 200px;\n    height: 25px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 200px;\n    height: 35px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 20px;\n  font-size: ${p => p.theme.fontSizes.xs};\n  color: ${p => p.theme.colors.error};\n\n  @media screen and (min-width: 768px) {\n    top: 28px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    top: 37px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.s};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { useFormik } from 'formik';\nimport TextField from '@mui/material/TextField';\nimport { FormStyle, FormBtn, SectionForm } from './FormContacts.styled';\nimport * as yup from 'yup';\n\nconst shema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name'\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid number'\n    )\n    .required('Number is required'),\n});\n\nexport default function FormContacts() {\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n\n  const isDublicate = ({ name, number }) => {\n    const result = contacts.find(\n      item => item.name === name || item.number === number\n    );\n    return result;\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: shema,\n    onSubmit: (values, { resetForm }) => {\n      if (isDublicate(values)) {\n        toast('this name or number is already added to contacts');\n        resetForm();\n        return;\n      }\n      dispatch(addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <SectionForm>\n      <FormStyle onSubmit={formik.handleSubmit}>\n        <TextField\n          required\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          id=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          type=\"text\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          size=\"small\"\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          required\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          id=\"number\"\n          label=\"Number\"\n          name=\"number\"\n          type=\"tel\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          size=\"small\"\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        {/* <Label>\n            Name\n            <InputForm\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Vasylchenko Serhii\"\n            />\n            <Error component=\"div\" name=\"name\" />\n          </Label>\n          <Label>\n            Number\n            <InputForm type=\"tel\" name=\"number\" placeholder=\"+380\" />\n            <Error component=\"div\" name=\"number\" />\n          </Label> */}\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </FormStyle>\n    </SectionForm>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from './Contaxts.styled';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FormContacts from 'components/FormContacts/FormContacts';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <FormContacts />\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          {loading && <Loader>Loading...</Loader>}\n          <ContactsList />\n        </>\n      ) : (\n        <p>Add your first number</p>\n      )}\n    </>\n  );\n}\n"],"names":["Loader","styled","p","theme","fontWeights","bold","fontSizes","m","colors","text","l","FilterStyle","SectionFilter","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","type","value","onChange","e","target","changeFilter","placeholder","List","ListItem","borders","normal","Number","RemoveContactBtn","accent","white","xs","ContactsList","contacts","selectContacts","markup","normalizedFilter","toLocaleLowerCase","name","includes","getFilteredContacts","map","id","number","onClick","removeContact","SectionForm","FormStyle","FormBtn","Field","ErrorMessage","error","s","shema","yup","shape","matches","required","FormContacts","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","find","item","isDublicate","toast","addContact","handleSubmit","TextField","handleChange","label","margin","variant","size","touched","Boolean","errors","helperText","Contacts","loading","selectIsLoading","useEffect","fetchContacts","length"],"sourceRoot":""}