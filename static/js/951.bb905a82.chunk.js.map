{"version":3,"file":"static/js/951.bb905a82.chunk.js","mappings":"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","sources":["pages/Contacts/Contaxts.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/FormContacts/FormContacts.styled.jsx","components/FormContacts/FormContacts.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Loader = styled.p`\n  font-weight: ${p => p.theme.fontWeights.bold};\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n","import styled from 'styled-components';\n\nexport const FilterStyle = styled.input`\n  height: 30px;\n  width: 200px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    height: 40px;\n    width: 400px;\n  }\n`;\n\nexport const SectionFilter = styled.section`\n  padding-bottom: 20px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport TextField from '@mui/material/TextField';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { SectionFilter } from './Filter.styled';\n\nexport default function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <SectionFilter>\n      <TextField\n        id=\"filter\"\n        size=\"small\"\n        value={filter}\n        onChange={handleChange}\n        label=\"Find the contact\"\n        variant=\"outlined\"\n      />\n    </SectionFilter>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  max-width: 300px;\n  margin-right: auto;\n  margin-left: auto;\n  display: flex;\n  flex-flow: column;\n\n  @media screen and (min-width: 768px) {\n    max-width: 700px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  text-align: start;\n  font-size: 20px;\n  border-bottom: ${p => p.theme.borders.normal};\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Number = styled.span`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n`;\n\nexport const RemoveContactBtn = styled.button`\n  margin-left: 5px;\n  padding: 3px 3px;\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.xs};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport {\n  ListItem,\n  List,\n  Number,\n  RemoveContactBtn,\n} from './ContactsList.styled';\n\nexport default function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContacts = contacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      const result = normalizedName.includes(normalizedFilter);\n      return result;\n    });\n\n    return filteredContacts;\n  };\n\n  const filterContacts = getFilteredContacts();\n\n  const markup = filterContacts.map(({ id, name, number }) => (\n    <ListItem key={id}>\n      <p>\n        {name}:{' '}\n        <Number>\n          {number}\n          <RemoveContactBtn\n            type=\"button\"\n            onClick={() => dispatch(removeContact(id))}\n          >\n            Delete\n          </RemoveContactBtn>\n        </Number>\n      </p>\n    </ListItem>\n  ));\n  return <List>{markup}</List>;\n}\n","import { Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const SectionForm = styled.section`\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  align-items: flex-end;\n  width: 215px;\n  justify-content: space-between;\n  text-align: start;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 270px;\n\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nexport const InputForm = styled(Field)`\n  display: inline-block;\n  width: 150px;\n  height: 20px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 200px;\n    height: 25px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 200px;\n    height: 35px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 20px;\n  font-size: ${p => p.theme.fontSizes.xs};\n  color: ${p => p.theme.colors.error};\n\n  @media screen and (min-width: 768px) {\n    top: 28px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    top: 37px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.s};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { useFormik } from 'formik';\nimport TextField from '@mui/material/TextField';\nimport { FormStyle, FormBtn, SectionForm } from './FormContacts.styled';\nimport * as yup from 'yup';\n\nconst shema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name'\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid number'\n    )\n    .required('Number is required'),\n});\n\nexport default function FormContacts() {\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n\n  const isDublicate = ({ name, number }) => {\n    const result = contacts.find(\n      item => item.name === name || item.number === number\n    );\n    return result;\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema: shema,\n    onSubmit: (values, { resetForm }) => {\n      if (isDublicate(values)) {\n        toast('this name or number is already added to contacts');\n        resetForm();\n        return;\n      }\n      dispatch(addContact(values));\n      resetForm();\n    },\n  });\n\n  return (\n    <SectionForm>\n      <FormStyle onSubmit={formik.handleSubmit}>\n        <TextField\n          required\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          id=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          type=\"text\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          size=\"small\"\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          required\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          id=\"number\"\n          label=\"Number\"\n          name=\"number\"\n          type=\"tel\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          size=\"small\"\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        {/* <Label>\n            Name\n            <InputForm\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Vasylchenko Serhii\"\n            />\n            <Error component=\"div\" name=\"name\" />\n          </Label>\n          <Label>\n            Number\n            <InputForm type=\"tel\" name=\"number\" placeholder=\"+380\" />\n            <Error component=\"div\" name=\"number\" />\n          </Label> */}\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </FormStyle>\n    </SectionForm>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from './Contaxts.styled';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FormContacts from 'components/FormContacts/FormContacts';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <FormContacts />\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          {loading && <Loader>Loading...</Loader>}\n          <ContactsList />\n        </>\n      ) : (\n        <p>Add your first number</p>\n      )}\n    </>\n  );\n}\n"],"names":["Loader","styled","p","theme","fontWeights","bold","fontSizes","m","colors","text","l","SectionFilter","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","TextField","id","size","value","onChange","e","target","changeFilter","label","variant","List","ListItem","borders","normal","Number","RemoveContactBtn","accent","white","xs","ContactsList","contacts","selectContacts","markup","normalizedFilter","toLocaleLowerCase","name","includes","getFilteredContacts","map","number","type","onClick","removeContact","SectionForm","FormStyle","FormBtn","Field","ErrorMessage","error","s","shema","yup","shape","matches","required","FormContacts","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","find","item","isDublicate","toast","addContact","handleSubmit","handleChange","margin","touched","Boolean","errors","helperText","Contacts","loading","selectIsLoading","useEffect","fetchContacts","length"],"sourceRoot":""}