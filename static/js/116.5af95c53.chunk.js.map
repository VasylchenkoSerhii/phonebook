{"version":3,"file":"static/js/116.5af95c53.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/FormContacts/FormContacts.styled.jsx","components/FormContacts/FormContacts.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterStyle = styled.input`\n  height: 30px;\n  width: 200px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 400px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    height: 40px;\n    width: 400px;\n  }\n`;\n\nexport const SectionFilter = styled.section`\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { FilterStyle, SectionFilter } from './Filter.styled';\n\nexport default function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <SectionFilter>\n      <FilterStyle\n        type=\"text\"\n        value={filter}\n        onChange={handleChange}\n        placeholder=\"Finde contact\"\n      />\n    </SectionFilter>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  max-width: 300px;\n  margin-right: auto;\n  margin-left: auto;\n  display: flex;\n  flex-flow: column;\n\n  @media screen and (min-width: 768px) {\n    max-width: 700px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  text-align: start;\n  font-size: 20px;\n  border-bottom: ${p => p.theme.borders.normal};\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Number = styled.span`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 5px;\n`;\n\nexport const RemoveContactBtn = styled.button`\n  margin-left: 5px;\n  padding: 3px 3px;\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.xs};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport {\n  ListItem,\n  List,\n  Number,\n  RemoveContactBtn,\n} from './ContactsList.styled';\n\nexport default function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContacts = contacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      const result = normalizedName.includes(normalizedFilter);\n      return result;\n    });\n\n    return filteredContacts;\n  };\n\n  const filterContacts = getFilteredContacts();\n\n  const markup = filterContacts.map(({ id, name, number }) => (\n    <ListItem key={id}>\n      <p>\n        {name}:{' '}\n        <Number>\n          {number}\n          <RemoveContactBtn\n            type=\"button\"\n            onClick={() => dispatch(removeContact(id))}\n          >\n            Delete\n          </RemoveContactBtn>\n        </Number>\n      </p>\n    </ListItem>\n  ));\n  return <List>{markup}</List>;\n}\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const SectionForm = styled.section`\n  padding-bottom: 20px;\n\n  @media screen and (min-width: 1200px) {\n    padding-top: 40px;\n    padding-bottom: 40px;\n  }\n`;\n\nexport const FormStyle = styled(Form)`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizes.m};\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.l};\n  }\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  align-items: flex-end;\n  width: 215px;\n  justify-content: space-between;\n  text-align: start;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 270px;\n\n    &:not(:last-child) {\n      margin-bottom: 20px;\n    }\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nexport const InputForm = styled(Field)`\n  display: inline-block;\n  width: 150px;\n  height: 20px;\n  outline: none;\n  color: ${p => p.theme.colors.text};\n\n  @media screen and (min-width: 768px) {\n    width: 200px;\n    height: 25px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 200px;\n    height: 35px;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 20px;\n  font-size: ${p => p.theme.fontSizes.xs};\n  color: ${p => p.theme.colors.error};\n\n  @media screen and (min-width: 768px) {\n    top: 28px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    top: 37px;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  background-color: ${p => p.theme.colors.accent};\n  border: none;\n  color: ${p => p.theme.colors.white};\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  cursor: pointer;\n  font-size: ${p => p.theme.fontSizes.s};\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #666666;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.m};\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { Formik } from 'formik';\nimport {\n  FormStyle,\n  SectionForm,\n  InputForm,\n  Label,\n  Error,\n  FormBtn,\n} from './FormContacts.styled';\nimport * as yup from 'yup';\n\nconst shema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name'\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid number'\n    )\n    .required('Number is required'),\n});\n\nexport default function FormContacts() {\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n\n  const isDublicate = ({ name, number }) => {\n    const result = contacts.find(\n      item => item.name === name || item.number === number\n    );\n    return result;\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (isDublicate(values)) {\n      toast('this name or number is already added to contacts');\n      resetForm();\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <SectionForm>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={shema}\n      >\n        <FormStyle>\n          <Label>\n            Name\n            <InputForm\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Vasylchenko Serhii\"\n            />\n            <Error component=\"div\" name=\"name\" />\n          </Label>\n          <Label>\n            Number\n            <InputForm type=\"tel\" name=\"number\" placeholder=\"+380\" />\n            <Error component=\"div\" name=\"number\" />\n          </Label>\n          <FormBtn type=\"submit\">Add contact</FormBtn>\n        </FormStyle>\n      </Formik>\n    </SectionForm>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FormContacts from 'components/FormContacts/FormContacts';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <FormContacts />\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactsList />\n        </>\n      ) : (\n        <p>Add your first number</p>\n      )}\n    </>\n  );\n}\n"],"names":["FilterStyle","styled","p","theme","colors","text","SectionFilter","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","type","value","onChange","e","target","changeFilter","placeholder","List","ListItem","borders","normal","Number","RemoveContactBtn","accent","white","fontSizes","xs","m","ContactsList","contacts","selectContacts","markup","normalizedFilter","toLocaleLowerCase","name","includes","getFilteredContacts","map","id","number","onClick","removeContact","SectionForm","FormStyle","Form","l","Label","InputForm","Field","Error","ErrorMessage","error","s","FormBtn","shema","yup","shape","matches","required","FormContacts","initialValues","onSubmit","values","resetForm","find","item","isDublicate","toast","addContact","validationSchema","component","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}